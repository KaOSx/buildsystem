--- makepkg	2010-07-28 22:55:36.142150935 +0200
+++ makepkg-chakra	2010-07-30 00:55:40.238563510 +0200
@@ -40,7 +40,7 @@ export TEXTDOMAINDIR='/usr/share/locale'
 # file -i does not work on Mac OSX unless legacy mode is set
 export COMMAND_MODE='legacy'
 
-myver='3.4.0'
+myver='3.4.0-chakra'
 confdir='../_buildscripts'
 BUILDSCRIPT='PKGBUILD'
 startdir="$PWD"
@@ -48,8 +48,10 @@ ARCH="$_arch"
 current_repo=`pushd $startdir &>/dev/null; pushd .. &>/dev/null; pwd | awk -F '/' '{print $NF}'; popd &>/dev/null; popd &>/dev/null`
 srcdir="$startdir/src"
 pkgdir="$startdir/pkg"
+dbgdir="$startdir/dbg"
+hdrdir="$startdir/hdr"
 
-packaging_options=('strip' 'docs' 'libtool' 'emptydirs' 'zipman' 'purge')
+packaging_options=('strip' 'splitdbg' 'splithdr' 'docs' 'libtool' 'emptydirs' 'zipman' 'purge')
 other_options=('ccache' 'distcc' 'makeflags' 'force')
 splitpkg_overrides=('pkgver' 'pkgrel' 'pkgdesc' 'arch' 'license' 'groups' \
                     'depends' 'optdepends' 'provides' 'conflicts' 'replaces' \
@@ -867,6 +869,59 @@ tidy_install() {
 		done
 	fi
 
+	if [ "$(check_option splitdbg)" = "y" ] || [ "$SPLIT_DBG" = "1" ]; then
+		msg2 "$(gettext "Moving debugging symbols from binaries and libraries into separate files...")"
+		local binary
+		if [ -z "${STRIP_DIRS[*]}" ]; then
+			# fall back to default value
+			STRIP_DIRS=(bin lib sbin usr/{bin,lib,sbin,local/{bin,lib,sbin}}
+			opt/*/{bin,lib,sbin})
+		fi
+		find ${STRIP_DIRS[@]} -type f 2>/dev/null | while read binary ; do
+			case "$(file -biz "$binary")" in
+				*application/x-sharedlib*)  # Libraries (.so)
+					/usr/bin/objcopy --only-keep-debug "$binary" "$binary.debug"
+					/usr/bin/strip --strip-debug --strip-unneeded "$binary"
+					debug_basebinary=`echo "$binary" | awk -F '/' '{print $NF}'`
+					debug_symbolfile=`echo "$binary.debug" | awk -F '/' '{print $NF}'`
+					debug_basedir=`dirname "$binary.debug"`
+					pushd $debug_basedir &>/dev/null
+						/usr/bin/objcopy --add-gnu-debuglink="$debug_symbolfile" "$debug_basebinary" 
+					popd &>/dev/null
+					if [ ! -d "${dbgdir}/usr/lib/debug/${debug_basedir}" ]; then
+						mkdir -p "${dbgdir}/usr/lib/debug/${debug_basedir}"
+					fi
+					mv "$binary.debug" "${dbgdir}/usr/lib/debug/${debug_basedir}/$debug_symbolfile";;
+				*application/x-archive*)  # Libraries (.a)
+					/usr/bin/objcopy --only-keep-debug "$binary" "$binary.debug"
+					/usr/bin/strip --strip-debug --strip-unneeded "$binary"
+					debug_basebinary=`echo "$binary" | awk -F '/' '{print $NF}'`
+					debug_symbolfile=`echo "$binary.debug" | awk -F '/' '{print $NF}'`
+					debug_basedir=`dirname "$binary.debug"`
+					pushd $debug_basedir &>/dev/null
+						/usr/bin/objcopy --add-gnu-debuglink="$debug_symbolfile" "$debug_basebinary" 
+					popd &>/dev/null
+					if [ ! -d "${dbgdir}/usr/lib/debug/${debug_basedir}" ]; then
+						mkdir -p "${dbgdir}/usr/lib/debug/${debug_basedir}"
+					fi
+					mv "$binary.debug" "${dbgdir}/usr/lib/debug/${debug_basedir}/$debug_symbolfile";;
+				*application/x-executable*) # Binaries
+					/usr/bin/objcopy --only-keep-debug "$binary" "$binary.debug"
+					/usr/bin/strip --strip-debug --strip-unneeded "$binary"
+					debug_basebinary=`echo "$binary" | awk -F '/' '{print $NF}'`
+					debug_symbolfile=`echo "$binary.debug" | awk -F '/' '{print $NF}'`
+					debug_basedir=`dirname "$binary.debug"`
+					pushd $debug_basedir &>/dev/null
+						/usr/bin/objcopy --add-gnu-debuglink="$debug_symbolfile" "$debug_basebinary" 
+					popd &>/dev/null
+					if [ ! -d "${dbgdir}/usr/lib/debug/${debug_basedir}" ]; then
+						mkdir -p "${dbgdir}/usr/lib/debug/${debug_basedir}"
+					fi
+					mv "$binary.debug" "${dbgdir}/usr/lib/debug/${debug_basedir}/$debug_symbolfile";;
+			esac
+		done
+	fi
+
 	if [[ $(check_option strip) = y && -n ${STRIP_DIRS[*]} ]]; then
 		msg2 "$(gettext "Stripping unneeded symbols from binaries and libraries...")"
 		# make sure library stripping variables are defined to prevent excess stripping
@@ -885,6 +940,27 @@ tidy_install() {
 		done
 	fi
 
+	if [ "$(check_option splithdr)" = "y" ] || [ "$SPLIT_HDR" = "1" ]; then
+		msg2 "$(gettext "Moving header files into separate package...")"
+		
+		# this is very hardcoded stuff
+		if [ -d "${pkgdir}/usr/include" ]; then
+			msg "DEBUG: moving headers..."
+			ls -la ${pkgdir}/usr/include
+			# move headers into new package
+			mkdir -p ${hdrdir}/usr
+			mv -v ${pkgdir}/usr/include ${hdrdir}/usr
+		fi
+		
+		if [ -d "${pkgdir}/usr/share/apps/cmake" ]; then
+			msg "DEBUG: moving .cmake files..."
+			ls -la ${pkgdir}/usr/share/apps/cmake
+			# also move .cmake files into the new package
+			mkdir -p ${hdrdir}/usr/share/apps
+			mv -v ${pkgdir}/usr/share/apps/cmake ${hdrdir}/usr/share/apps
+		fi
+	fi
+
 	if [[ $(check_option libtool) = "n" ]]; then
 		msg2 "$(gettext "Removing libtool .la files...")"
 		find . ! -type d -name "*.la" -exec rm -f -- '{}' \;
@@ -969,6 +1045,116 @@ write_pkginfo() {
 	fi
 }
 
+write_debug_pkginfo() {
+	local builddate=$(date -u "+%s")
+	if [ -n "$PACKAGER" ]; then
+		local packager="$PACKAGER"
+	else
+		local packager="Unknown Packager"
+	fi
+	local size=$(du -sk | awk '{print $1 * 1024}')
+
+	msg2 "$(gettext "Generating .PKGINFO file...")"
+	echo "# Generated by makepkg $myver" >.PKGINFO
+	if [ "$INFAKEROOT" -eq 1 ]; then
+		echo "# using $(fakeroot -v)" >>.PKGINFO
+	fi
+	echo "# $(LC_ALL=C date -u)" >>.PKGINFO
+	echo "pkgname = $1-debug" >>.PKGINFO
+	[ "$SPLITPKG" -eq 1 ] && echo "pkgbase = $pkgbase" >>.PKGINFO
+	echo "pkgver = $pkgver-$pkgrel" >>.PKGINFO
+	echo "pkgdesc = $pkgdesc (Debugging Symbols)" >>.PKGINFO
+	echo "url = $url" >>.PKGINFO
+	echo "builddate = $builddate" >>.PKGINFO
+	echo "packager = $packager" >>.PKGINFO
+	echo "size = $size" >>.PKGINFO
+	if [ -n "$CARCH" ]; then
+		echo "arch = $CARCH" >>.PKGINFO
+	fi
+
+	echo "group = kdemod-debug" >>.PKGINFO
+	[ "$SPLITPKG" -eq 1 ] && echo "group = $pkgbase-debug" >>.PKGINFO
+	echo "group = kdemod-uninstall" >>.PKGINFO
+
+	local it
+	for it in "${packaging_options[@]}"; do
+		local ret="$(check_option $it)"
+		if [ "$ret" != "?" ]; then
+			if [ "$ret" = "y" ]; then
+				echo "makepkgopt = $it" >>.PKGINFO
+			else
+				echo "makepkgopt = !$it" >>.PKGINFO
+			fi
+		fi
+	done
+
+	# TODO maybe remove this at some point
+	# warn if license array is not present or empty
+	if [ -z "$license" ]; then
+		warning "$(gettext "Please add a license line to your %s!")" "$BUILDSCRIPT"
+		plain "$(gettext "Example for GPL\'ed software: license=('GPL').")"
+	fi
+}
+
+write_header_pkginfo() {
+	local builddate=$(date -u "+%s")
+	if [ -n "$PACKAGER" ]; then
+		local packager="$PACKAGER"
+	else
+		local packager="Unknown Packager"
+	fi
+	local size=$(du -sk | awk '{print $1 * 1024}')
+
+	msg2 "$(gettext "Generating .PKGINFO file...")"
+	echo "# Generated by makepkg $myver" >.PKGINFO
+	if [ "$INFAKEROOT" -eq 1 ]; then
+		echo "# using $(fakeroot -v)" >>.PKGINFO
+	fi
+	echo "# $(LC_ALL=C date -u)" >>.PKGINFO
+	echo "pkgname = $1-devel" >>.PKGINFO
+	[ "$SPLITPKG" -eq 1 ] && echo "pkgbase = $pkgbase" >>.PKGINFO
+	echo "pkgver = $pkgver-$pkgrel" >>.PKGINFO
+	echo "pkgdesc = $pkgdesc (Development Headers)" >>.PKGINFO
+	echo "url = $url" >>.PKGINFO
+	echo "builddate = $builddate" >>.PKGINFO
+	echo "packager = $packager" >>.PKGINFO
+	echo "size = $size" >>.PKGINFO
+	if [ -n "$CARCH" ]; then
+		echo "arch = $CARCH" >>.PKGINFO
+	fi
+	if [ "$(check_option force)" = "y" ]; then
+		echo "force = true" >> .PKGINFO
+	fi
+
+	local it
+	for it in "${license[@]}"; do
+		echo "license = $it" >>.PKGINFO
+	done
+
+	echo "depends = $nameofpkg" >>.PKGINFO
+        echo "group = kdemod-devel" >>.PKGINFO
+	echo "group = kdemod-headers" >>.PKGINFO
+	echo "group = kdemod-uninstall" >>.PKGINFO
+
+	for it in "${packaging_options[@]}"; do
+		local ret="$(check_option $it)"
+		if [ "$ret" != "?" ]; then
+			if [ "$ret" = "y" ]; then
+				echo "makepkgopt = $it" >>.PKGINFO
+			else
+				echo "makepkgopt = !$it" >>.PKGINFO
+			fi
+		fi
+	done
+
+	# TODO maybe remove this at some point
+	# warn if license array is not present or empty
+	if [ -z "$license" ]; then
+		warning "$(gettext "Please add a license line to your %s!")" "$BUILDSCRIPT"
+		plain "$(gettext "Example for GPL\'ed software: license=('GPL').")"
+	fi
+}
+
 check_package() {
 	cd "$pkgdir"
 
@@ -983,6 +1169,7 @@ check_package() {
 	# check for references to the build directory
 	if grep -R "${srcdir}" "${pkgdir}" &>/dev/null; then
 		warning "$(gettext "Package contains reference to %s")" "\$srcdir"
+		msg "grep -R ${srcdir} ${pkgdir}"
 	fi
 }
 
@@ -1075,6 +1262,216 @@ create_package() {
 	fi
 }
 
+create_debug_package() {
+	if [ ! -d "$dbgdir" ]; then
+		error "$(gettext "Missing dbg/ directory.")"
+		plain "$(gettext "Aborting...")"
+		exit 1 # $E_MISSING_PKGDIR
+	fi
+
+	if [ -z "$1" ]; then
+		nameofpkg="$pkgname"
+	else
+		nameofpkg="$1"
+	fi
+
+	cd "$dbgdir"
+	write_debug_pkginfo $nameofpkg
+
+	cd "$dbgdir"
+	msg "$(gettext "Creating package...")"
+
+	local comp_files=".PKGINFO"
+
+	# tar it up
+	msg2 "$(gettext "Compressing package...")"
+
+	case "$PKGEXT" in
+		*tar.gz)  EXT=${PKGEXT%.gz} ;;
+		*tar.bz2) EXT=${PKGEXT%.bz2} ;;
+		*tar.xz)  EXT=${PKGEXT%.xz} ;;
+		*) warning "$(gettext "'%s' is not a valid archive extension.")" \
+		"$PKGEXT" ; EXT=$PKGEXT ;;
+	esac
+	local pkg_file="$PKGDEST/${nameofpkg}-debug-${pkgver}-${pkgrel}-${CARCH}${EXT}"
+
+	local ret=0
+
+	# when fileglobbing, we want * in an empty directory to expand to
+	# the null string rather than itself
+	shopt -s nullglob
+	bsdtar -cf - $comp_files * > "$pkg_file" || ret=$?
+	shopt -u nullglob
+
+	if [ $ret -eq 0 ]; then
+		case "$PKGEXT" in
+			*tar.gz)  gzip -f -n "$pkg_file" ;;
+			*tar.bz2) bzip2 -f "$pkg_file" ;;
+			*tar.xz)  xz -z -f "$pkg_file" ;;
+		esac
+		ret=$?
+	fi
+
+	if [ $ret -ne 0 ]; then
+		error "$(gettext "Failed to create debug package file.")"
+		exit 1 # TODO: error code
+	fi
+}
+
+create_header_package() {
+	if [ ! -d "$hdrdir" ]; then
+		error "$(gettext "Missing hdr/ directory.")"
+		plain "$(gettext "Aborting...")"
+		exit 1 # $E_MISSING_PKGDIR
+	fi
+
+	if [ -z "$1" ]; then
+		nameofpkg="$pkgname"
+	else
+		nameofpkg="$1"
+	fi
+
+	cd "$hdrdir"
+	write_header_pkginfo $nameofpkg
+
+	cd "$hdrdir"
+	msg "$(gettext "Creating package...")"
+
+	local comp_files=".PKGINFO"
+
+	# tar it up
+	msg2 "$(gettext "Compressing package...")"
+
+	case "$PKGEXT" in
+		*tar.gz)  EXT=${PKGEXT%.gz} ;;
+		*tar.bz2) EXT=${PKGEXT%.bz2} ;;
+		*tar.xz)  EXT=${PKGEXT%.xz} ;;
+		*) warning "$(gettext "'%s' is not a valid archive extension.")" \
+		"$PKGEXT" ; EXT=$PKGEXT ;;
+	esac
+	local pkg_file="$PKGDEST/${nameofpkg}-${pkgver}-${pkgrel}-${CARCH}${EXT}"
+
+	local ret=0
+
+	# when fileglobbing, we want * in an empty directory to expand to
+	# the null string rather than itself
+	shopt -s nullglob
+	bsdtar -cf - $comp_files * > "$pkg_file" || ret=$?
+	shopt -u nullglob
+
+	if [ $ret -eq 0 ]; then
+		case "$PKGEXT" in
+			*tar.gz)  gzip -f -n "$pkg_file" ;;
+			*tar.bz2) bzip2 -f "$pkg_file" ;;
+			*tar.xz)  xz -z -f "$pkg_file" ;;
+		esac
+		ret=$?
+	fi
+
+	if [ $ret -ne 0 ]; then
+		error "$(gettext "Failed to create header package file.")"
+		exit 1 # TODO: error code
+	fi
+}
+
+create_header2_package() {
+	if [ -z "$1" ]; then
+		nameofpkg="$pkgname"
+	else
+		nameofpkg="$1"
+	fi
+
+	if [ ! -d "$hdrdir" ]; then
+		error "$(gettext "Missing hdr/ directory.")"
+		plain "$(gettext "Aborting...")"
+		exit 1 # $E_MISSING_PKGDIR
+	fi
+
+	cd "$hdrdir"
+	msg "$(gettext "Creating package with header files...")"
+
+	local builddate=$(date -u "+%s")
+	if [ -n "$PACKAGER" ]; then
+		local packager="$PACKAGER"
+	else
+		local packager="Unknown Packager"
+	fi
+	local size=$(du -sk | awk '{print $1 * 1024}')
+
+	# write the .PKGINFO file
+	msg2 "$(gettext "Generating .PKGINFO file...")"
+	echo "# Generated by makepkg $myver" >.PKGINFO
+	if [ "$INFAKEROOT" -eq 1 ]; then
+		echo "# using $(fakeroot -v)" >>.PKGINFO
+	fi
+	echo "# $(LC_ALL=C date -u)" >>.PKGINFO
+	echo "pkgname = $nameofpkg-devel" >>.PKGINFO
+	echo "pkgver = $pkgver-$pkgrel" >>.PKGINFO
+	echo "pkgdesc = $pkgdesc (development files)" >>.PKGINFO
+	echo "url = $url" >>.PKGINFO
+	echo "builddate = $builddate" >>.PKGINFO
+	echo "packager = $packager" >>.PKGINFO
+	echo "size = $size" >>.PKGINFO
+	if [ -n "$CARCH" ]; then
+		echo "arch = $CARCH" >>.PKGINFO
+	fi
+	if [ "$(check_option force)" = "y" ]; then
+		echo "force = true" >> .PKGINFO
+	fi
+
+	local it
+	for it in "${license[@]}"; do
+		echo "license = $it" >>.PKGINFO
+	done
+	
+	echo "depends = $nameofpkg" >>.PKGINFO
+        echo "group = kdemod-devel" >>.PKGINFO
+	echo "group = kdemod-headers" >>.PKGINFO
+
+	for it in "${packaging_options[@]}"; do
+		local ret="$(check_option $it)"
+		if [ "$ret" != "?" ]; then
+			if [ "$ret" = "y" ]; then
+				echo "makepkgopt = $it" >>.PKGINFO
+			else
+				echo "makepkgopt = !$it" >>.PKGINFO
+			fi
+		fi
+	done
+
+	# TODO maybe remove this at some point
+	# warn if license array is not present or empty
+	if [ -z "$license" ]; then
+		warning "$(gettext "Please add a license line to your %s!")" "$BUILDSCRIPT"
+		plain "$(gettext "Example for GPL'ed software: license=('GPL').")"
+	fi
+
+	local comp_files=".PKGINFO"
+
+	# tar it up
+	msg2 "$(gettext "Compressing package...")"
+
+	local TAR_OPT
+	case "$PKGEXT" in
+		*tar.gz)  TAR_OPT="z" ;;
+		*tar.bz2) TAR_OPT="j" ;;
+		*) warning "$(gettext "'%s' is not a valid archive extension.")" \
+		"$PKGEXT" ;;
+	esac
+
+	local pkg_file="$PKGDEST/${nameofpkg}-devel-${pkgver}-${pkgrel}-${CARCH}${PKGEXT}"
+
+	# when fileglobbing, we want * in an empty directory to expand to
+	# the null string rather than itself
+	shopt -s nullglob
+
+	if ! bsdtar -c${TAR_OPT}f "$pkg_file" $comp_files *; then
+		error "$(gettext "Failed to create package file.")"
+		exit 1 # TODO: error code
+	fi
+	shopt -u nullglob
+}
+
 create_srcpackage() {
 	cd "$startdir"
 
@@ -1508,6 +1905,8 @@ usage() {
 	echo "$(gettext "  -r, --rmdeps     Remove installed dependencies after a successful build")"
 	echo "$(gettext "  -R, --repackage  Repackage contents of the package without rebuilding")"
 	echo "$(gettext "  -s, --syncdeps   Install missing dependencies with pacman")"
+	echo "$(gettext "  -t, --splitdbg   Put debugging symbols into their own package")"
+	echo "$(gettext "  -u, --splithdr   Put development headers into their own package")"
 	echo "$(gettext "  --allsource      Generate a source-only tarball including downloaded sources")"
 	echo "$(gettext "  --asroot         Allow makepkg to run as root user")"
 	printf "$(gettext "  --config <file>  Use an alternate config file (instead of '%s')")\n" "$confdir/makepkg.conf"
@@ -1550,7 +1949,7 @@ OPT_SHORT="AcCdefFghiLmop:rRsV"
 OPT_LONG="allsource,asroot,ignorearch,clean,cleancache,nodeps"
 OPT_LONG="$OPT_LONG,noextract,force,forcever:,geninteg,help,holdver"
 OPT_LONG="$OPT_LONG,install,log,nocolor,nobuild,pkg:,rmdeps,repackage,skipinteg"
-OPT_LONG="$OPT_LONG,source,syncdeps,version,config:"
+OPT_LONG="$OPT_LONG,source,syncdeps,splitdbg,splithdr,version,config:"
 # Pacman Options
 OPT_LONG="$OPT_LONG,noconfirm,noprogressbar"
 OPT_TEMP="$(parse_options $OPT_SHORT $OPT_LONG "$@" || echo 'PARSE_OPTIONS FAILED')"
@@ -1593,6 +1992,8 @@ while true; do
 		--skipinteg)      SKIPINTEG=1 ;;
 		--source)         SOURCEONLY=1 ;;
 		-s|--syncdeps)    DEP_BIN=1 ;;
+		-t|--splitdbg)    SPLIT_DBG=1 ;;
+		-u|--splithdr)    SPLIT_HDR=1 ;;
 
 		-h|--help)        usage; exit 0 ;; # E_OK
 		-V|--version)     version; exit 0 ;; # E_OK
@@ -1866,15 +2267,59 @@ if (( INFAKEROOT )); then
 			run_package
 			tidy_install
 		fi
-		create_package
+			if [ "$(check_option splitdbg)" = "y" ] || [ "$(check_option splithdr)" = "y" ] || [ "$SPLIT_DBG" = "1" ] || [ "$SPLIT_HDR" = "1" ]; then
+				create_package
+				# second check, if there are any files
+				check_dbg_files=`find $dbgdir/ -name "*.debug"`
+				if [ -z "$check_dbg_files" ]; then
+					msg "$(gettext "No .debug files found, skipping creation of debug packages...")"
+				else
+					create_debug_package
+				fi
+				# second check, if there are any files
+				check_hdr_files=`find $hdrdir/ -name "include"`
+				if [ -z "$check_hdr_files" ]; then
+					msg "$(gettext "Skipping creation of the devel pkg...")"
+				else
+					create_header_package
+				fi
+			else
+				create_package
+			fi
 	else
 		for pkg in ${pkgname[@]}; do
-			pkgdir="$pkgdir/$pkg"
+			pkgdir="$pkgdir/pkg_$pkg"
 			mkdir -p "$pkgdir"
+			dbgdir="$startdir/dbg/dbg_${pkg}"
+			[ ! -d "$dbgdir" ] && mkdir -p "$dbgdir"
+			hdrdir="$startdir/hdr/hdr_${pkg}"
+			[ ! -d "$hdrdir" ] && mkdir -p "$hdrdir"
 			chmod a-s "$pkgdir"
 			backup_package_variables
 			run_package $pkg
 			tidy_install
+
+			if [ "$(check_option splitdbg)" = "y" ] || [ "$(check_option splithdr)" = "y" ] || [ "$SPLIT_DBG" = "1" ] || [ "$SPLIT_HDR" = "1" ]; then
+				create_package $pkg
+				# second check, if there are any files
+				check_dbg_files=`find $dbgdir/ -name "*.debug"`
+				if [ -z "$check_dbg_files" ]; then
+					msg "$(gettext "No .debug files found, skipping creation of the debug pkg...")"
+				else
+					create_debug_package $pkg
+				fi
+				# third check, headers
+				check_hdr_files=`find $hdrdir/ -name "include"`
+				if [ -z "$check_hdr_files" ]; then
+					msg "$(gettext "Skipping creation of the devel pkg...")"
+				else
+					create_header_package $pkg
+				fi
+
+			else
+				create_package $pkg
+			fi
+
 			create_package $pkg
 			restore_package_variables
 			pkgdir="${pkgdir%/*}"
@@ -1933,6 +2378,8 @@ umask 0022
 
 # get back to our src directory so we can begin with sources
 mkdir -p "$srcdir"
+mkdir -p "$dbgdir"
+mkdir -p "$hdrdir"
 chmod a-s "$srcdir"
 cd "$srcdir"
 
@@ -1988,22 +2435,68 @@ else
 				tidy_install
 			else
 				if (( ! REPKG )); then
-					tidy_install
+					if [ "$(check_option splitdbg)" = "y" ] || [ "$(check_option splithdr)" = "y" ] || [ "$SPLIT_DBG" = "1" ] || [ "$SPLIT_HDR" = "1" ]; then
+						tidy_install
+					fi
 				else
 					warning "$(gettext "Repackaging without the use of a package() function is deprecated.")"
 					plain "$(gettext "File permissions may not be preserved.")"
 				fi
 			fi
-			create_package
+			if [ "$(check_option splitdbg)" = "y" ] || [ "$(check_option splithdr)" = "y" ] || [ "$SPLIT_DBG" = "1" ] || [ "$SPLIT_HDR" = "1" ]; then
+				create_package
+				# second check, if there are any files
+				check_dbg_files=`find $dbgdir/ -name "*.debug"`
+				if [ -z "$check_dbg_files" ]; then
+					msg "$(gettext "No .debug files found, skipping creation of the debug pkg...")"
+				else
+					create_debug_package
+				fi
+			
+				# second check, if there are any files
+				check_hdr_files=`find $hdrdir/ -name "include"`
+				if [ -z "$check_hdr_files" ]; then
+				      msg "$(gettext "Skipping creation of the devel pkg...")"
+				else
+				      create_header_package
+				fi
+			else
+				create_package
+			fi
 		else
 			for pkg in ${pkgname[@]}; do
-				pkgdir="$pkgdir/$pkg"
+				pkgdir="$pkgdir/pkg_$pkg"
 				mkdir -p "$pkgdir"
 				chmod a-s "$pkgdir"
+				dbgdir="$startdir/dbg/dbg_${pkg}"
+				[ ! -d "$dbgdir" ] && mkdir -p "$dbgdir"
+				hdrdir="$startdir/hdr/hdr_${pkg}"
+				[ ! -d "$hdrdir" ] && mkdir -p "$hdrdir"
 				backup_package_variables
 				run_package $pkg
 				tidy_install
-				create_package $pkg
+
+				if [ "$(check_option splitdbg)" = "y" ] || [ "$(check_option splithdr)" = "y" ] || [ "$SPLIT_DBG" = "1" ] || [ "$SPLIT_HDR" = "1" ]; then
+					create_package $pkg
+					# second check, if there are any files
+					check_dbg_files=`find $dbgdir/ -name "*.debug"`
+					if [ -z "$check_dbg_files" ]; then
+						msg "$(gettext "No .debug files found, skipping creation of the debug pkg...")"
+					else
+						create_debug_package $pkg
+					fi
+					# third check, headers
+					check_hdr_files=`find $hdrdir/ -name "include"`
+					if [ -z "$check_hdr_files" ]; then
+						msg "$(gettext "Skipping creation of the devel pkg...")"
+					else
+						create_header_package $pkg
+					fi
+
+				else
+					create_package $pkg
+				fi
+
 				restore_package_variables
 				pkgdir="${pkgdir%/*}"
 			done
